#pragma warning(disable:4996)
#include<iostream>
#include<string>

using namespace std;

int longest_code_cnt(int* num, int start_address, int cnt, int length) {//在剩下的里面找cnt个
	int num_now = 0, highest = 0;
	for (int i = start_address; i <= length; i++) {
		if (i > length + 2 - cnt * 2) {
			break;
		}
		if (i <= length) {
			num_now += num[i];
		}
		if (cnt > 0) {
			if (i + 2 <= length) {
				num_now += longest_code_cnt(num, i + 2, cnt - 1, length);
			}
		}
		highest = (highest > num_now) ? highest : num_now;
		num_now = 0;
	}
	return highest;
}

int main(void) {
	string cmd, cmd_backup;
	getline(cin, cmd);
	cmd_backup = cmd;
	//一共有num_of_space行代码
	int num_of_space = 1;
	while (1) {
		int k = cmd_backup.find(' ');
		if (k <= 0)break;
		cmd_backup = &cmd_backup[k + 1];
		num_of_space++;
	}
	//已经找到
	int* num = new int[num_of_space + 1];
	int cnt = 1;
	int cmd_length = cmd.length();
	for (int i = 0; i < cmd_length; i++) {
		if (cmd[i] != ' ') {
			if (i + 1 < cmd_length) {
				if (cmd[i + 1] == ' ') {
					num[cnt] = (int)(cmd[i] - '0');
				}
				else {
					num[cnt] = (int)(cmd[i] - '0') * 10 + (int)(cmd[i + 1] - '0');
					i++;
				}
			}
			else {
				num[cnt] = (int)(cmd[i] - '0');
			}
			cnt++;
		}
	}
	int highest = 0;
	if (num_of_space % 2 == 1) {
		num_of_space += 1;
	}
	int biggest_cnt = num_of_space / 2;
	for (int i = biggest_cnt; i >= 1; i--) {//实际上会超时，这里应该用biggest_cnt-2
		int now = longest_code_cnt(num, 1, i, num_of_space);
		highest = (now > highest) ? now : highest;
	}
	cout << highest;
}